"use strict";(self.webpackChunkzio_http_docs=self.webpackChunkzio_http_docs||[]).push([[997],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=i(n),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var i=2;i<o;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8926:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return i},toc:function(){return l},default:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],p={},c="Streaming Response",i={unversionedId:"examples/advanced-examples/stream-response",id:"examples/advanced-examples/stream-response",isDocsHomePage:!1,title:"Streaming Response",description:"",source:"@site/docs/examples/advanced-examples/stream-response.md",sourceDirName:"examples/advanced-examples",slug:"/examples/advanced-examples/stream-response",permalink:"/zio-http/docs/examples/advanced-examples/stream-response",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Streaming File",permalink:"/zio-http/docs/examples/advanced-examples/stream-file"},next:{title:"Web Socket Server",permalink:"/zio-http/docs/examples/advanced-examples/web-socket-advanced"}},l=[],m={toc:l};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"streaming-response"},"Streaming Response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\nimport zhttp.service.Server\nimport zio.stream.ZStream\nimport zio._\n\n/**\n * Example to encode content using a ZStream\n */\nobject StreamingResponse extends App {\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] = {\n\n    // Starting the server (for more advanced startup configuration checkout `HelloWorldAdvanced`)\n    Server.start(8090, app.silent).exitCode\n  }\n\n  // Create a message as a Chunk[Byte]\n  val message                    = Chunk.fromArray("Hello world !\\r\\n".getBytes(HTTP_CHARSET))\n  // Use `Http.collect` to match on route\n  val app: HttpApp[Any, Nothing] = Http.collect[Request] {\n\n    // Simple (non-stream) based route\n    case Method.GET -> !! / "health" => Response.ok\n\n    // ZStream powered response\n    case Method.GET -> !! / "stream" =>\n      Response(\n        status = Status.OK,\n        headers = Headers.contentLength(message.length.toLong),\n        data = HttpData.fromStream(ZStream.fromChunk(message)), // Encoding content using a ZStream\n      )\n  }\n}\n')))}u.isMDXComponent=!0}}]);